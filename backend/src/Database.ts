//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { FilmsEntity } from './db/Films.entity';
import { DirectorsEntity } from './db/Directors.entity';
import { ActorsEntity } from './db/Actors.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      FilmsEntity,
      DirectorsEntity,
      ActorsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Films: [
        {
          title: 'title 1',
          releaseDate: '2025-01-15T04:14:35.425Z',
          director: 1,
          actors: 1,
          genre: 'genre 1',
          description: 'description 1',
          id: 22,
        },
        {
          title: 'title 2',
          releaseDate: '2023-07-15T13:52:27.550Z',
          director: 2,
          actors: 2,
          genre: 'genre 2',
          description: 'description 2',
          id: 39,
        },
        {
          title: 'title 3',
          releaseDate: '2023-10-04T20:53:28.683Z',
          director: 3,
          actors: 3,
          genre: 'genre 3',
          description: 'description 3',
          id: 26,
        },
        {
          title: 'title 4',
          releaseDate: '2025-04-02T10:47:06.439Z',
          director: 4,
          actors: 4,
          genre: 'genre 4',
          description: 'description 4',
          id: 89,
        },
        {
          title: 'title 5',
          releaseDate: '2023-08-15T17:49:26.934Z',
          director: 5,
          actors: 5,
          genre: 'genre 5',
          description: 'description 5',
          id: 69,
        },
      ],
      Directors: [
        { name: 'name 1', dateOfBirth: '2024-05-23T11:54:04.574Z', id: 60 },
        { name: 'name 2', dateOfBirth: '2024-04-17T03:29:26.514Z', id: 42 },
        { name: 'name 3', dateOfBirth: '2025-03-29T16:14:52.033Z', id: 3 },
        { name: 'name 4', dateOfBirth: '2024-08-16T02:01:50.835Z', id: 31 },
        { name: 'name 5', dateOfBirth: '2023-12-15T19:41:20.475Z', id: 73 },
      ],
      Actors: [
        { name: 'name 1', dateOfBirth: '2023-09-29T18:09:03.665Z', id: 38 },
        { name: 'name 2', dateOfBirth: '2023-08-20T14:42:05.858Z', id: 14 },
        { name: 'name 3', dateOfBirth: '2023-09-04T19:18:06.347Z', id: 2 },
        { name: 'name 4', dateOfBirth: '2025-01-12T02:23:08.898Z', id: 28 },
        { name: 'name 5', dateOfBirth: '2025-04-11T05:21:59.089Z', id: 72 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('FilmsEntity', data.Films);
      await this.SeedResource('DirectorsEntity', data.Directors);
      await this.SeedResource('ActorsEntity', data.Actors);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
